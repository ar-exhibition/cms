using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using cms.ar.xarchitecture.de.cmsXARCH;
using Microsoft.AspNetCore.Http;
using Vlingo.UUID;
using cms.ar.xarchitecture.de.Helper;
using System.IO;
using cms.ar.xarchitecture.de.Models.Wrapper;
using MongoDB.Driver;
using MongoDB.Bson;

namespace cms.ar.xarchitecture.de.Controllers.Frontend
{
    public class ScenesController : Controller
    {
        private NameBasedGenerator uuidCreator;
        private IHttpContextAccessor _host;

        private IMongoCollection<Scene> _scenes;

        private string host;
        private string prot;

        public ScenesController(IHttpContextAccessor httpContextAccessor, IMongoClient client)
        {
            var database = client.GetDatabase(Backend.DatabaseName);

            _scenes = database.GetCollection<Scene>("Scenes");

            uuidCreator = new NameBasedGenerator(HashType.SHA1);
            _host = httpContextAccessor;

            host = httpContextAccessor.HttpContext.Request.Host.Value;
            prot = httpContextAccessor.HttpContext.Request.Scheme;
        }

        // GET: Scenes
        public async Task<IActionResult> Index()
        {
            string preamble = prot + "://" + host;

            List<Scene> scenes = await _scenes.AsQueryable().ToListAsync();
            List<SceneView> views = new List<SceneView>();

            foreach(Scene scene in scenes)
            {
                SceneView newView = new SceneView
                {
                    _id = scene._id,
                    SceneName = scene.SceneName,
                    MarkerFileName = scene.MarkerFileName,
                    MarkerFileLink = default,
                    DateChanged = scene.DateChanged
                };

                string link = Backend.MapFilenameToDownloadLink(Backend.ContentType.Marker, preamble, scene.MarkerFileName);
                string downloadItem = "<a href='" + link + "'>" + scene.MarkerFileName + "</a>";

                newView.MarkerFileLink = downloadItem;

                views.Add(newView);
            }

            return View(views);
        }

        // GET: Scenes/Details/5
        public async Task<IActionResult> Details(string id)
        {
            ObjectId _id = ObjectId.Parse(id);

            if (id == null)
            {
                return NotFound();
            }

            Scene scene = _scenes.Find(s => s._id == _id).FirstOrDefault();

            if (scene == default)
            {
                return NotFound();
            }

            return View(scene);
        }

        // GET: Scenes/Create
        public IActionResult Create()
        {
            return View();
        }

        // POST: Scenes/Create
        // To protect from overposting attacks, enable the specific properties you want to bind to, for 
        // more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create(SceneSubmissionValues values)
        {
            Scene newRecord = new Scene();

            //ewRecord.WorldMapSceneID = default;
            newRecord.SceneName = values.SceneName;
            newRecord.WorldMapFileName = default; //will be generated by client app
            newRecord.WorldMapFileLink = default;
            newRecord.MarkerFileLink = default;
            newRecord.DateChanged = DateTime.Now;
            newRecord.Assets = default;

            if (values.FileToUpload == null || values.FileToUpload.Length == 0)
            {
                newRecord.MarkerFileName = MarkerCreator.createQRCode(values.SceneName, _host.HttpContext.Request.Host.Value); //give back UUID
            }
            else
            {
                //switch to backend file handling!
                newRecord.MarkerFileName = await uploadToFilesystem(values.FileToUpload); //give back UUID

                //await Backend.SaveToFilesystem(values.FileToUpload, Backend.ContentType.Marker);
                //newRecord.MarkerFileName = Convert.ToString(uuidCreator.GenerateGuid(values.FileToUpload.FileName + DateTime.Now)); 
            }

            if (ModelState.IsValid)
            {
                await _scenes.InsertOneAsync(newRecord);
                return RedirectToAction("About", "Home"); //prb put some nice "you're done" view here!
            }
            return RedirectToAction("About", "Home"); //Error page?
        }

        // GET: Scenes/Edit/5
        public async Task<IActionResult> Edit(string pid)
        {
            ObjectId id = ObjectId.Parse(pid);

            if (id == null)
            {
                return NotFound();
            }

            var scene = await _scenes.FindAsync(s => s._id == id);
            if (scene == null)
            {
                return NotFound();
            }
            return View(scene);
        }

        // POST: Scenes/Edit/5
        // To protect from overposting attacks, enable the specific properties you want to bind to, for 
        // more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(String pid, [Bind("SceneId,SceneName,FileUuid,MarkerUuid")] Scene scene)
        {
            ObjectId id = ObjectId.Parse(pid);

            if (id != scene._id)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    await _scenes.UpdateOneAsync(s => s._id == id, scene.ToBsonDocument());

                }
                catch (MongoException e)
                {
                    return NotFound(e.Message);
                }
                return RedirectToAction(nameof(Index));
            }
            return View(scene);
        }

        // GET: Scenes/Delete/5
        public async Task<IActionResult> Delete(string id)
        {
            ObjectId _id = ObjectId.Parse(id);

            if (id == null)
            {
                return NotFound();
            }

            Scene scene = _scenes.Find(s => s._id == _id).FirstOrDefault();

            if (scene == null)
            {
                return NotFound();
            }

            return View(scene);
        }

        // POST: Scenes/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(string id)
        {
            ObjectId _id = ObjectId.Parse(id);
            var scene = await _scenes.DeleteOneAsync(s => s._id == _id);
            return RedirectToAction(nameof(Index));
        }

        //private bool SceneExists(int id)
        //{
        //    return _context.Scene.Any(e => e.SceneId == id);
        //}

        private async Task<String> uploadToFilesystem(IFormFile file)
        {
            string extension = Path.GetExtension(file.FileName);
            string UUID = Convert.ToString(uuidCreator.GenerateGuid(file.FileName + DateTime.Now));
            string filenameWithUUID = UUID + extension;

            string dir = Directory.GetCurrentDirectory();

            var path = Path.Combine(
                        dir, "static", "content", "marker",
                        filenameWithUUID);

            using (var stream = new FileStream(path, FileMode.Create))
            {
                await file.CopyToAsync(stream);
            }

            return filenameWithUUID;
        }
    }

    //public class SceneSubmissionValues
    //{
    //    public string SceneName { get; set; }
    //    public IFormFile FileToUpload { get; set; }
    //}

}
